tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.0m14/types.yaml
  - http://www.getcloudify.org/spec/aws-plugin/1.4.3/plugin.yaml
  - http://www.getcloudify.org/spec/docker-plugin/1.3.2/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - types/nodecellar.yaml

inputs:
  image:
    description: >
      The AWS AWI ID

  size:
    description: >
      The AWS instance type

  agent_user:
    description: >
      User name used when SSH-ing into the started machine
    default: ubuntu

  web_port:
    description: >
      Which port you want to map the web port to.
    default: 8080

  mongo_port:
    description: >
      Which port you want to map the mongo port to.
    default: 27017

  web_status_port:
    description: >
      Which port for the mongo web status page.
    default: 28017

  nodecellar_container_port_bindings:
    description: >
      A dict of port bindings for the node container.
    default:
      8080: 8080

  mongo_container_port_bindings:
    description: >
      A dict of port bindings for the mongo container.
    default:
      27017: 27017
      28017: 28017

node_types:

  nodecellar.nodes.MonitoredDockerHost:
    derived_from: cloudify.aws.nodes.Instance
    properties:
      cloudify_agent:
        default:
          user: { get_input: agent_user }
          home_dir: /home/ubuntu
      parameters:
        default:
          user_data: |
            #!/bin/bash
            sudo service ssh stop
            curl -o install.sh -sSL https://get.docker.com/
            sudo sh install.sh
            sudo groupadd docker
            sudo gpasswd -a ubuntu docker
            sudo service docker restart
            sudo service ssh start
    interfaces:
      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                default:
                  interval: 1
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                default:
                  CPUCollector: {}
                  MemoryCollector: {}
                  LoadAverageCollector: {}
                  DiskUsageCollector:
                    config:
                      devices: x?vd[a-z]+[0-9]*$
                  NetworkCollector: {}

node_templates:

  nodecellar_elasticip:
    type: cloudify.aws.nodes.ElasticIP

  mongod_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      description: MongoDBSecGroup
      rules:
        - ip_protocol: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: { get_input: mongo_port }
          to_port: { get_input: mongo_port }
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: { get_input: web_status_port }
          to_port: { get_input: web_status_port }
          cidr_ip: 0.0.0.0/0

  nodecellar_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      description: NodeJSSecGroup
      rules:
        - ip_protocol: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: { get_input: web_port }
          to_port: { get_input: web_port }
          cidr_ip: 0.0.0.0/0

  mongo_vm:
    type: nodecellar.nodes.MonitoredDockerHost
    properties:
      image_id: { get_input: image }
      instance_type: { get_input: size }
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: mongod_security_group

  node_vm:
    type: nodecellar.nodes.MonitoredDockerHost
    properties:
      image_id: { get_input: image }
      instance_type: { get_input: size }
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: nodecellar_security_group
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: nodecellar_elasticip

  mongod_container:
    type: nodecellar.nodes.MongoContainer
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            params:
              ports:
                - { get_input: mongo_port }
                - { get_input: web_status_port }
              stdin_open: true
              tty: true
              command: mongod --rest --httpinterface --smallfiles
        start:
          inputs:
            params:
              port_bindings: { get_input: mongo_container_port_bindings }
    relationships:
      - type: cloudify.relationships.contained_in
        target: mongo_vm

  nodecellar_container:
    type: nodecellar.nodes.NodecellarContainer
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            params:
              ports:
                - { get_input: web_port }
              stdin_open: true
              tty: true
              command: nodejs server.js
              environment:
                NODECELLAR_PORT: { get_input: web_port }
                MONGO_PORT: { get_input: mongo_port }
                MONGO_HOST: { get_property: [ mongod_container, name ] }
        start:
          inputs:
            params:
              port_bindings: { get_input: nodecellar_container_port_bindings }
              extra_hosts:
                mongod: { get_attribute: [ mongo_vm, ip ] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: node_vm
      - type: cloudify.relationships.depends_on
        target: mongod_container

outputs:
  endpoint:
    description: Web application endpoint
    value:
      ip_address: { get_attribute: [ nodecellar_elasticip, aws_resource_id ] }
      port: { get_input: web_port }
